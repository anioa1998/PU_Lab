@page "/books"
@using Model.DTOs
@using RepositoryPattern
@inject IBookRepository _bookRepository
@inject NavigationManager _navManager


<button type="button" class="btn btn-success" @onclick="() => EditBook(null)">Add book</button>

<table class="table">
    <thead>
        <tr>
            <th>Title</th>
            <th>Release Date</th>
            <th>Average Rate</th>
            <th>Rate Count</th>
            <th>Authors</th>
            <th>Actions</th>
        </tr>
    </thead>
    <tbody>
        @foreach (var book in books)
        {
        <tr>
            <td>@book.Title</td>
            <td>@book.ReleaseDate.ToString("dd.MM.yyyy")</td>
            <td>@book.AverageRate</td>
            <td>@book.RatesCount</td>
            <td>@string.Join(", ", book.Authors)</td>
            <td><button class="btn btn-secondary oi oi-pencil" type="button" @onclick="() => EditBook(book.Id)"></button></td>
            <td><button class="btn btn-secondary oi oi-plus" type="button" @onclick="() => AddRate(book.Id)"></button></td>
            <td><button class="btn btn-secondary oi oi-x" type="button" @onclick="() => RemoveBook(book.Id)"></button></td>
        </tr>
        }
    </tbody>
</table>

@code
{
    private List<GetBookDTO> books;
    private PaginationDTO pagination = new PaginationDTO(0, 40);

    protected override async Task OnInitializedAsync()
    {
        books = _bookRepository.GetBooks(pagination);
    }

    private void EditBook(int? id)
    {
        if (id.HasValue)
        {
            _navManager.NavigateTo($"/edit/books/{id}");
        }
        else
        {
            _navManager.NavigateTo($"/edit/books");
        }
    }

    private void AddRate(int id)
    {
        _navManager.NavigateTo($"/rate/books/{id}");
    }
    private void RemoveBook(int id)
        {
        _bookRepository.DeleteBook(id);
        _navManager.NavigateTo("/books");
        }
}
